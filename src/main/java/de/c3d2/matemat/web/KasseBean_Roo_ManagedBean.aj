// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package de.c3d2.matemat.web;

import de.c3d2.matemat.domain.Kasse;
import de.c3d2.matemat.web.KasseBean;
import de.c3d2.matemat.web.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.DoubleRangeValidator;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect KasseBean_Roo_ManagedBean {
    
    declare @type: KasseBean: @ManagedBean(name = "kasseBean");
    
    declare @type: KasseBean: @SessionScoped;
    
    private String KasseBean.name = "Kasses";
    
    private Kasse KasseBean.kasse;
    
    private List<Kasse> KasseBean.allKasses;
    
    private boolean KasseBean.dataVisible = false;
    
    private List<String> KasseBean.columns;
    
    private HtmlPanelGrid KasseBean.createPanelGrid;
    
    private HtmlPanelGrid KasseBean.editPanelGrid;
    
    private HtmlPanelGrid KasseBean.viewPanelGrid;
    
    private boolean KasseBean.createDialogVisible = false;
    
    @PostConstruct
    public void KasseBean.init() {
        columns = new ArrayList<String>();
        columns.add("amount");
    }
    
    public String KasseBean.getName() {
        return name;
    }
    
    public List<String> KasseBean.getColumns() {
        return columns;
    }
    
    public List<Kasse> KasseBean.getAllKasses() {
        return allKasses;
    }
    
    public void KasseBean.setAllKasses(List<Kasse> allKasses) {
        this.allKasses = allKasses;
    }
    
    public String KasseBean.findAllKasses() {
        allKasses = Kasse.findAllKasses();
        dataVisible = !allKasses.isEmpty();
        return null;
    }
    
    public boolean KasseBean.isDataVisible() {
        return dataVisible;
    }
    
    public void KasseBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid KasseBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void KasseBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid KasseBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void KasseBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid KasseBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void KasseBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid KasseBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel amountCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        amountCreateOutput.setFor("amountCreateInput");
        amountCreateOutput.setId("amountCreateOutput");
        amountCreateOutput.setValue("Amount:");
        htmlPanelGrid.getChildren().add(amountCreateOutput);
        
        InputText amountCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        amountCreateInput.setId("amountCreateInput");
        amountCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{kasseBean.kasse.amount}", Float.class));
        amountCreateInput.setRequired(true);
        DoubleRangeValidator amountCreateInputValidator = new DoubleRangeValidator();
        amountCreateInputValidator.setMinimum(0.0);
        amountCreateInput.addValidator(amountCreateInputValidator);
        htmlPanelGrid.getChildren().add(amountCreateInput);
        
        Message amountCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        amountCreateInputMessage.setId("amountCreateInputMessage");
        amountCreateInputMessage.setFor("amountCreateInput");
        amountCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(amountCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid KasseBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel amountEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        amountEditOutput.setFor("amountEditInput");
        amountEditOutput.setId("amountEditOutput");
        amountEditOutput.setValue("Amount:");
        htmlPanelGrid.getChildren().add(amountEditOutput);
        
        InputText amountEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        amountEditInput.setId("amountEditInput");
        amountEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{kasseBean.kasse.amount}", Float.class));
        amountEditInput.setRequired(true);
        DoubleRangeValidator amountEditInputValidator = new DoubleRangeValidator();
        amountEditInputValidator.setMinimum(0.0);
        amountEditInput.addValidator(amountEditInputValidator);
        htmlPanelGrid.getChildren().add(amountEditInput);
        
        Message amountEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        amountEditInputMessage.setId("amountEditInputMessage");
        amountEditInputMessage.setFor("amountEditInput");
        amountEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(amountEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid KasseBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText amountLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        amountLabel.setId("amountLabel");
        amountLabel.setValue("Amount:");
        htmlPanelGrid.getChildren().add(amountLabel);
        
        HtmlOutputText amountValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        amountValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{kasseBean.kasse.amount}", String.class));
        htmlPanelGrid.getChildren().add(amountValue);
        
        return htmlPanelGrid;
    }
    
    public Kasse KasseBean.getKasse() {
        if (kasse == null) {
            kasse = new Kasse();
        }
        return kasse;
    }
    
    public void KasseBean.setKasse(Kasse kasse) {
        this.kasse = kasse;
    }
    
    public String KasseBean.onEdit() {
        return null;
    }
    
    public boolean KasseBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void KasseBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String KasseBean.displayList() {
        createDialogVisible = false;
        findAllKasses();
        return "kasse";
    }
    
    public String KasseBean.displayCreateDialog() {
        kasse = new Kasse();
        createDialogVisible = true;
        return "kasse";
    }
    
    public String KasseBean.persist() {
        String message = "";
        if (kasse.getId() != null) {
            kasse.merge();
            message = "message_successfully_updated";
        } else {
            kasse.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Kasse");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllKasses();
    }
    
    public String KasseBean.delete() {
        kasse.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Kasse");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllKasses();
    }
    
    public void KasseBean.reset() {
        kasse = null;
        createDialogVisible = false;
    }
    
    public void KasseBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
