// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package de.c3d2.matemat.web;

import de.c3d2.matemat.domain.Kasse;
import de.c3d2.matemat.domain.Transaction;
import de.c3d2.matemat.web.TransactionBean;
import de.c3d2.matemat.web.converter.KasseConverter;
import de.c3d2.matemat.web.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect TransactionBean_Roo_ManagedBean {
    
    declare @type: TransactionBean: @ManagedBean(name = "transactionBean");
    
    declare @type: TransactionBean: @SessionScoped;
    
    private String TransactionBean.name = "Transactions";
    
    private Transaction TransactionBean.transaction;
    
    private List<Transaction> TransactionBean.allTransactions;
    
    private boolean TransactionBean.dataVisible = false;
    
    private List<String> TransactionBean.columns;
    
    private HtmlPanelGrid TransactionBean.createPanelGrid;
    
    private HtmlPanelGrid TransactionBean.editPanelGrid;
    
    private HtmlPanelGrid TransactionBean.viewPanelGrid;
    
    private boolean TransactionBean.createDialogVisible = false;
    
    @PostConstruct
    public void TransactionBean.init() {
        columns = new ArrayList<String>();
        columns.add("io");
        columns.add("amount_after");
        columns.add("amount_before");
        columns.add("d");
    }
    
    public String TransactionBean.getName() {
        return name;
    }
    
    public List<String> TransactionBean.getColumns() {
        return columns;
    }
    
    public List<Transaction> TransactionBean.getAllTransactions() {
        return allTransactions;
    }
    
    public void TransactionBean.setAllTransactions(List<Transaction> allTransactions) {
        this.allTransactions = allTransactions;
    }
    
    public String TransactionBean.findAllTransactions() {
        allTransactions = Transaction.findAllTransactions();
        dataVisible = !allTransactions.isEmpty();
        return null;
    }
    
    public boolean TransactionBean.isDataVisible() {
        return dataVisible;
    }
    
    public void TransactionBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid TransactionBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void TransactionBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid TransactionBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void TransactionBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid TransactionBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void TransactionBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid TransactionBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel kasseCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        kasseCreateOutput.setFor("kasseCreateInput");
        kasseCreateOutput.setId("kasseCreateOutput");
        kasseCreateOutput.setValue("Kasse:");
        htmlPanelGrid.getChildren().add(kasseCreateOutput);
        
        AutoComplete kasseCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        kasseCreateInput.setId("kasseCreateInput");
        kasseCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{transactionBean.transaction.kasse}", Kasse.class));
        kasseCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{transactionBean.completeKasse}", List.class, new Class[] { String.class }));
        kasseCreateInput.setDropdown(true);
        kasseCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "kasse", String.class));
        kasseCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{kasse.amount}", String.class));
        kasseCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{kasse}", Kasse.class));
        kasseCreateInput.setConverter(new KasseConverter());
        kasseCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(kasseCreateInput);
        
        Message kasseCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        kasseCreateInputMessage.setId("kasseCreateInputMessage");
        kasseCreateInputMessage.setFor("kasseCreateInput");
        kasseCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(kasseCreateInputMessage);
        
        OutputLabel ioCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        ioCreateOutput.setFor("ioCreateInput");
        ioCreateOutput.setId("ioCreateOutput");
        ioCreateOutput.setValue("Io:");
        htmlPanelGrid.getChildren().add(ioCreateOutput);
        
        InputText ioCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        ioCreateInput.setId("ioCreateInput");
        ioCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{transactionBean.transaction.io}", Float.class));
        ioCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(ioCreateInput);
        
        Message ioCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        ioCreateInputMessage.setId("ioCreateInputMessage");
        ioCreateInputMessage.setFor("ioCreateInput");
        ioCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(ioCreateInputMessage);
        
        OutputLabel amount_afterCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        amount_afterCreateOutput.setFor("amount_afterCreateInput");
        amount_afterCreateOutput.setId("amount_afterCreateOutput");
        amount_afterCreateOutput.setValue("Amount_after:");
        htmlPanelGrid.getChildren().add(amount_afterCreateOutput);
        
        InputText amount_afterCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        amount_afterCreateInput.setId("amount_afterCreateInput");
        amount_afterCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{transactionBean.transaction.amount_after}", Float.class));
        amount_afterCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(amount_afterCreateInput);
        
        Message amount_afterCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        amount_afterCreateInputMessage.setId("amount_afterCreateInputMessage");
        amount_afterCreateInputMessage.setFor("amount_afterCreateInput");
        amount_afterCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(amount_afterCreateInputMessage);
        
        OutputLabel amount_beforeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        amount_beforeCreateOutput.setFor("amount_beforeCreateInput");
        amount_beforeCreateOutput.setId("amount_beforeCreateOutput");
        amount_beforeCreateOutput.setValue("Amount_before:");
        htmlPanelGrid.getChildren().add(amount_beforeCreateOutput);
        
        InputText amount_beforeCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        amount_beforeCreateInput.setId("amount_beforeCreateInput");
        amount_beforeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{transactionBean.transaction.amount_before}", Float.class));
        amount_beforeCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(amount_beforeCreateInput);
        
        Message amount_beforeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        amount_beforeCreateInputMessage.setId("amount_beforeCreateInputMessage");
        amount_beforeCreateInputMessage.setFor("amount_beforeCreateInput");
        amount_beforeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(amount_beforeCreateInputMessage);
        
        OutputLabel dCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        dCreateOutput.setFor("dCreateInput");
        dCreateOutput.setId("dCreateOutput");
        dCreateOutput.setValue("D:");
        htmlPanelGrid.getChildren().add(dCreateOutput);
        
        Calendar dCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        dCreateInput.setId("dCreateInput");
        dCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{transactionBean.transaction.d}", Date.class));
        dCreateInput.setNavigator(true);
        dCreateInput.setEffect("slideDown");
        dCreateInput.setPattern("dd/MM/yyyy");
        dCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(dCreateInput);
        
        Message dCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        dCreateInputMessage.setId("dCreateInputMessage");
        dCreateInputMessage.setFor("dCreateInput");
        dCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(dCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid TransactionBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel kasseEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        kasseEditOutput.setFor("kasseEditInput");
        kasseEditOutput.setId("kasseEditOutput");
        kasseEditOutput.setValue("Kasse:");
        htmlPanelGrid.getChildren().add(kasseEditOutput);
        
        AutoComplete kasseEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        kasseEditInput.setId("kasseEditInput");
        kasseEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{transactionBean.transaction.kasse}", Kasse.class));
        kasseEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{transactionBean.completeKasse}", List.class, new Class[] { String.class }));
        kasseEditInput.setDropdown(true);
        kasseEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "kasse", String.class));
        kasseEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{kasse.amount}", String.class));
        kasseEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{kasse}", Kasse.class));
        kasseEditInput.setConverter(new KasseConverter());
        kasseEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(kasseEditInput);
        
        Message kasseEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        kasseEditInputMessage.setId("kasseEditInputMessage");
        kasseEditInputMessage.setFor("kasseEditInput");
        kasseEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(kasseEditInputMessage);
        
        OutputLabel ioEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        ioEditOutput.setFor("ioEditInput");
        ioEditOutput.setId("ioEditOutput");
        ioEditOutput.setValue("Io:");
        htmlPanelGrid.getChildren().add(ioEditOutput);
        
        InputText ioEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        ioEditInput.setId("ioEditInput");
        ioEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{transactionBean.transaction.io}", Float.class));
        ioEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(ioEditInput);
        
        Message ioEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        ioEditInputMessage.setId("ioEditInputMessage");
        ioEditInputMessage.setFor("ioEditInput");
        ioEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(ioEditInputMessage);
        
        OutputLabel amount_afterEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        amount_afterEditOutput.setFor("amount_afterEditInput");
        amount_afterEditOutput.setId("amount_afterEditOutput");
        amount_afterEditOutput.setValue("Amount_after:");
        htmlPanelGrid.getChildren().add(amount_afterEditOutput);
        
        InputText amount_afterEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        amount_afterEditInput.setId("amount_afterEditInput");
        amount_afterEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{transactionBean.transaction.amount_after}", Float.class));
        amount_afterEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(amount_afterEditInput);
        
        Message amount_afterEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        amount_afterEditInputMessage.setId("amount_afterEditInputMessage");
        amount_afterEditInputMessage.setFor("amount_afterEditInput");
        amount_afterEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(amount_afterEditInputMessage);
        
        OutputLabel amount_beforeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        amount_beforeEditOutput.setFor("amount_beforeEditInput");
        amount_beforeEditOutput.setId("amount_beforeEditOutput");
        amount_beforeEditOutput.setValue("Amount_before:");
        htmlPanelGrid.getChildren().add(amount_beforeEditOutput);
        
        InputText amount_beforeEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        amount_beforeEditInput.setId("amount_beforeEditInput");
        amount_beforeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{transactionBean.transaction.amount_before}", Float.class));
        amount_beforeEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(amount_beforeEditInput);
        
        Message amount_beforeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        amount_beforeEditInputMessage.setId("amount_beforeEditInputMessage");
        amount_beforeEditInputMessage.setFor("amount_beforeEditInput");
        amount_beforeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(amount_beforeEditInputMessage);
        
        OutputLabel dEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        dEditOutput.setFor("dEditInput");
        dEditOutput.setId("dEditOutput");
        dEditOutput.setValue("D:");
        htmlPanelGrid.getChildren().add(dEditOutput);
        
        Calendar dEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        dEditInput.setId("dEditInput");
        dEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{transactionBean.transaction.d}", Date.class));
        dEditInput.setNavigator(true);
        dEditInput.setEffect("slideDown");
        dEditInput.setPattern("dd/MM/yyyy");
        dEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(dEditInput);
        
        Message dEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        dEditInputMessage.setId("dEditInputMessage");
        dEditInputMessage.setFor("dEditInput");
        dEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(dEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid TransactionBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText kasseLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        kasseLabel.setId("kasseLabel");
        kasseLabel.setValue("Kasse:");
        htmlPanelGrid.getChildren().add(kasseLabel);
        
        HtmlOutputText kasseValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        kasseValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{transactionBean.transaction.kasse}", Kasse.class));
        kasseValue.setConverter(new KasseConverter());
        htmlPanelGrid.getChildren().add(kasseValue);
        
        HtmlOutputText ioLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        ioLabel.setId("ioLabel");
        ioLabel.setValue("Io:");
        htmlPanelGrid.getChildren().add(ioLabel);
        
        HtmlOutputText ioValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        ioValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{transactionBean.transaction.io}", String.class));
        htmlPanelGrid.getChildren().add(ioValue);
        
        HtmlOutputText amount_afterLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        amount_afterLabel.setId("amount_afterLabel");
        amount_afterLabel.setValue("Amount_after:");
        htmlPanelGrid.getChildren().add(amount_afterLabel);
        
        HtmlOutputText amount_afterValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        amount_afterValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{transactionBean.transaction.amount_after}", String.class));
        htmlPanelGrid.getChildren().add(amount_afterValue);
        
        HtmlOutputText amount_beforeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        amount_beforeLabel.setId("amount_beforeLabel");
        amount_beforeLabel.setValue("Amount_before:");
        htmlPanelGrid.getChildren().add(amount_beforeLabel);
        
        HtmlOutputText amount_beforeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        amount_beforeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{transactionBean.transaction.amount_before}", String.class));
        htmlPanelGrid.getChildren().add(amount_beforeValue);
        
        HtmlOutputText dLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dLabel.setId("dLabel");
        dLabel.setValue("D:");
        htmlPanelGrid.getChildren().add(dLabel);
        
        HtmlOutputText dValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{transactionBean.transaction.d}", Date.class));
        DateTimeConverter dValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        dValueConverter.setPattern("dd/MM/yyyy");
        dValue.setConverter(dValueConverter);
        htmlPanelGrid.getChildren().add(dValue);
        
        return htmlPanelGrid;
    }
    
    public Transaction TransactionBean.getTransaction() {
        if (transaction == null) {
            transaction = new Transaction();
        }
        return transaction;
    }
    
    public void TransactionBean.setTransaction(Transaction transaction) {
        this.transaction = transaction;
    }
    
    public List<Kasse> TransactionBean.completeKasse(String query) {
        List<Kasse> suggestions = new ArrayList<Kasse>();
        for (Kasse kasse : Kasse.findAllKasses()) {
            String kasseStr = String.valueOf(kasse.getAmount());
            if (kasseStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(kasse);
            }
        }
        return suggestions;
    }
    
    public String TransactionBean.onEdit() {
        return null;
    }
    
    public boolean TransactionBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void TransactionBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String TransactionBean.displayList() {
        createDialogVisible = false;
        findAllTransactions();
        return "transaction";
    }
    
    public String TransactionBean.displayCreateDialog() {
        transaction = new Transaction();
        createDialogVisible = true;
        return "transaction";
    }
    
    public String TransactionBean.persist() {
        String message = "";
        if (transaction.getId() != null) {
            transaction.merge();
            message = "message_successfully_updated";
        } else {
            transaction.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Transaction");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllTransactions();
    }
    
    public String TransactionBean.delete() {
        transaction.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Transaction");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllTransactions();
    }
    
    public void TransactionBean.reset() {
        transaction = null;
        createDialogVisible = false;
    }
    
    public void TransactionBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
