// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package de.c3d2.matemat.web;

import de.c3d2.matemat.domain.Drink;
import de.c3d2.matemat.web.DrinkBean;
import de.c3d2.matemat.web.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.spinner.Spinner;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect DrinkBean_Roo_ManagedBean {
    
    declare @type: DrinkBean: @ManagedBean(name = "drinkBean");
    
    declare @type: DrinkBean: @SessionScoped;
    
    private String DrinkBean.name = "Drinks";
    
    private Drink DrinkBean.drink;
    
    private List<Drink> DrinkBean.allDrinks;
    
    private boolean DrinkBean.dataVisible = false;
    
    private List<String> DrinkBean.columns;
    
    private HtmlPanelGrid DrinkBean.createPanelGrid;
    
    private HtmlPanelGrid DrinkBean.editPanelGrid;
    
    private HtmlPanelGrid DrinkBean.viewPanelGrid;
    
    private boolean DrinkBean.createDialogVisible = false;
    
    @PostConstruct
    public void DrinkBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("price");
        columns.add("bottleSize");
        columns.add("crateSize");
    }
    
    public String DrinkBean.getName() {
        return name;
    }
    
    public List<String> DrinkBean.getColumns() {
        return columns;
    }
    
    public List<Drink> DrinkBean.getAllDrinks() {
        return allDrinks;
    }
    
    public void DrinkBean.setAllDrinks(List<Drink> allDrinks) {
        this.allDrinks = allDrinks;
    }
    
    public String DrinkBean.findAllDrinks() {
        allDrinks = Drink.findAllDrinks();
        dataVisible = !allDrinks.isEmpty();
        return null;
    }
    
    public boolean DrinkBean.isDataVisible() {
        return dataVisible;
    }
    
    public void DrinkBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid DrinkBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void DrinkBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid DrinkBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void DrinkBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid DrinkBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void DrinkBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid DrinkBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameCreateOutput.setFor("nameCreateInput");
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputText nameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{drinkBean.drink.name}", String.class));
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        OutputLabel priceCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        priceCreateOutput.setFor("priceCreateInput");
        priceCreateOutput.setId("priceCreateOutput");
        priceCreateOutput.setValue("Price:");
        htmlPanelGrid.getChildren().add(priceCreateOutput);
        
        InputText priceCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        priceCreateInput.setId("priceCreateInput");
        priceCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{drinkBean.drink.price}", Float.class));
        priceCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(priceCreateInput);
        
        Message priceCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        priceCreateInputMessage.setId("priceCreateInputMessage");
        priceCreateInputMessage.setFor("priceCreateInput");
        priceCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(priceCreateInputMessage);
        
        OutputLabel bottleSizeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        bottleSizeCreateOutput.setFor("bottleSizeCreateInput");
        bottleSizeCreateOutput.setId("bottleSizeCreateOutput");
        bottleSizeCreateOutput.setValue("Bottle Size:");
        htmlPanelGrid.getChildren().add(bottleSizeCreateOutput);
        
        InputText bottleSizeCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        bottleSizeCreateInput.setId("bottleSizeCreateInput");
        bottleSizeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{drinkBean.drink.bottleSize}", Float.class));
        bottleSizeCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(bottleSizeCreateInput);
        
        Message bottleSizeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        bottleSizeCreateInputMessage.setId("bottleSizeCreateInputMessage");
        bottleSizeCreateInputMessage.setFor("bottleSizeCreateInput");
        bottleSizeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(bottleSizeCreateInputMessage);
        
        OutputLabel crateSizeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        crateSizeCreateOutput.setFor("crateSizeCreateInput");
        crateSizeCreateOutput.setId("crateSizeCreateOutput");
        crateSizeCreateOutput.setValue("Crate Size:");
        htmlPanelGrid.getChildren().add(crateSizeCreateOutput);
        
        Spinner crateSizeCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        crateSizeCreateInput.setId("crateSizeCreateInput");
        crateSizeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{drinkBean.drink.crateSize}", Integer.class));
        crateSizeCreateInput.setRequired(true);
        
        htmlPanelGrid.getChildren().add(crateSizeCreateInput);
        
        Message crateSizeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        crateSizeCreateInputMessage.setId("crateSizeCreateInputMessage");
        crateSizeCreateInputMessage.setFor("crateSizeCreateInput");
        crateSizeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(crateSizeCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid DrinkBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameEditOutput.setFor("nameEditInput");
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputText nameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{drinkBean.drink.name}", String.class));
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        OutputLabel priceEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        priceEditOutput.setFor("priceEditInput");
        priceEditOutput.setId("priceEditOutput");
        priceEditOutput.setValue("Price:");
        htmlPanelGrid.getChildren().add(priceEditOutput);
        
        InputText priceEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        priceEditInput.setId("priceEditInput");
        priceEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{drinkBean.drink.price}", Float.class));
        priceEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(priceEditInput);
        
        Message priceEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        priceEditInputMessage.setId("priceEditInputMessage");
        priceEditInputMessage.setFor("priceEditInput");
        priceEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(priceEditInputMessage);
        
        OutputLabel bottleSizeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        bottleSizeEditOutput.setFor("bottleSizeEditInput");
        bottleSizeEditOutput.setId("bottleSizeEditOutput");
        bottleSizeEditOutput.setValue("Bottle Size:");
        htmlPanelGrid.getChildren().add(bottleSizeEditOutput);
        
        InputText bottleSizeEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        bottleSizeEditInput.setId("bottleSizeEditInput");
        bottleSizeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{drinkBean.drink.bottleSize}", Float.class));
        bottleSizeEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(bottleSizeEditInput);
        
        Message bottleSizeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        bottleSizeEditInputMessage.setId("bottleSizeEditInputMessage");
        bottleSizeEditInputMessage.setFor("bottleSizeEditInput");
        bottleSizeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(bottleSizeEditInputMessage);
        
        OutputLabel crateSizeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        crateSizeEditOutput.setFor("crateSizeEditInput");
        crateSizeEditOutput.setId("crateSizeEditOutput");
        crateSizeEditOutput.setValue("Crate Size:");
        htmlPanelGrid.getChildren().add(crateSizeEditOutput);
        
        Spinner crateSizeEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        crateSizeEditInput.setId("crateSizeEditInput");
        crateSizeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{drinkBean.drink.crateSize}", Integer.class));
        crateSizeEditInput.setRequired(true);
        
        htmlPanelGrid.getChildren().add(crateSizeEditInput);
        
        Message crateSizeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        crateSizeEditInputMessage.setId("crateSizeEditInputMessage");
        crateSizeEditInputMessage.setFor("crateSizeEditInput");
        crateSizeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(crateSizeEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid DrinkBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        HtmlOutputText nameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{drinkBean.drink.name}", String.class));
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText priceLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        priceLabel.setId("priceLabel");
        priceLabel.setValue("Price:");
        htmlPanelGrid.getChildren().add(priceLabel);
        
        HtmlOutputText priceValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        priceValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{drinkBean.drink.price}", String.class));
        htmlPanelGrid.getChildren().add(priceValue);
        
        HtmlOutputText bottleSizeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bottleSizeLabel.setId("bottleSizeLabel");
        bottleSizeLabel.setValue("Bottle Size:");
        htmlPanelGrid.getChildren().add(bottleSizeLabel);
        
        HtmlOutputText bottleSizeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bottleSizeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{drinkBean.drink.bottleSize}", String.class));
        htmlPanelGrid.getChildren().add(bottleSizeValue);
        
        HtmlOutputText crateSizeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        crateSizeLabel.setId("crateSizeLabel");
        crateSizeLabel.setValue("Crate Size:");
        htmlPanelGrid.getChildren().add(crateSizeLabel);
        
        HtmlOutputText crateSizeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        crateSizeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{drinkBean.drink.crateSize}", String.class));
        htmlPanelGrid.getChildren().add(crateSizeValue);
        
        return htmlPanelGrid;
    }
    
    public Drink DrinkBean.getDrink() {
        if (drink == null) {
            drink = new Drink();
        }
        return drink;
    }
    
    public void DrinkBean.setDrink(Drink drink) {
        this.drink = drink;
    }
    
    public String DrinkBean.onEdit() {
        return null;
    }
    
    public boolean DrinkBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void DrinkBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String DrinkBean.displayList() {
        createDialogVisible = false;
        findAllDrinks();
        return "drink";
    }
    
    public String DrinkBean.displayCreateDialog() {
        drink = new Drink();
        createDialogVisible = true;
        return "drink";
    }
    
    public String DrinkBean.persist() {
        String message = "";
        if (drink.getId() != null) {
            drink.merge();
            message = "message_successfully_updated";
        } else {
            drink.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Drink");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllDrinks();
    }
    
    public String DrinkBean.delete() {
        drink.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Drink");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllDrinks();
    }
    
    public void DrinkBean.reset() {
        drink = null;
        createDialogVisible = false;
    }
    
    public void DrinkBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
