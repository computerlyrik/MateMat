// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package de.c3d2.matemat.web;

import de.c3d2.matemat.domain.Hacker;
import de.c3d2.matemat.web.HackerBean;
import de.c3d2.matemat.web.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import javax.faces.validator.DoubleRangeValidator;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect HackerBean_Roo_ManagedBean {
    
    declare @type: HackerBean: @ManagedBean(name = "hackerBean");
    
    declare @type: HackerBean: @SessionScoped;
    
    private String HackerBean.name = "Hackers";
    
    private Hacker HackerBean.hacker;
    
    private List<Hacker> HackerBean.allHackers;
    
    private boolean HackerBean.dataVisible = false;
    
    private List<String> HackerBean.columns;
    
    private HtmlPanelGrid HackerBean.createPanelGrid;
    
    private HtmlPanelGrid HackerBean.editPanelGrid;
    
    private HtmlPanelGrid HackerBean.viewPanelGrid;
    
    private boolean HackerBean.createDialogVisible = false;
    
    @PostConstruct
    public void HackerBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("amount");
        columns.add("pin");
        columns.add("lastDrink");
    }
    
    public String HackerBean.getName() {
        return name;
    }
    
    public List<String> HackerBean.getColumns() {
        return columns;
    }
    
    public List<Hacker> HackerBean.getAllHackers() {
        return allHackers;
    }
    
    public void HackerBean.setAllHackers(List<Hacker> allHackers) {
        this.allHackers = allHackers;
    }
    
    public String HackerBean.findAllHackers() {
        allHackers = Hacker.findAllHackers();
        dataVisible = !allHackers.isEmpty();
        return null;
    }
    
    public boolean HackerBean.isDataVisible() {
        return dataVisible;
    }
    
    public void HackerBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid HackerBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void HackerBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid HackerBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void HackerBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid HackerBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void HackerBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid HackerBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameCreateOutput.setFor("nameCreateInput");
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputText nameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{hackerBean.hacker.name}", String.class));
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        OutputLabel amountCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        amountCreateOutput.setFor("amountCreateInput");
        amountCreateOutput.setId("amountCreateOutput");
        amountCreateOutput.setValue("Amount:");
        htmlPanelGrid.getChildren().add(amountCreateOutput);
        
        InputText amountCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        amountCreateInput.setId("amountCreateInput");
        amountCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{hackerBean.hacker.amount}", Float.class));
        amountCreateInput.setRequired(true);
        DoubleRangeValidator amountCreateInputValidator = new DoubleRangeValidator();
        amountCreateInputValidator.setMinimum(-10.0);
        amountCreateInput.addValidator(amountCreateInputValidator);
        htmlPanelGrid.getChildren().add(amountCreateInput);
        
        Message amountCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        amountCreateInputMessage.setId("amountCreateInputMessage");
        amountCreateInputMessage.setFor("amountCreateInput");
        amountCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(amountCreateInputMessage);
        
        OutputLabel pinCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        pinCreateOutput.setFor("pinCreateInput");
        pinCreateOutput.setId("pinCreateOutput");
        pinCreateOutput.setValue("Pin:");
        htmlPanelGrid.getChildren().add(pinCreateOutput);
        
        InputText pinCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        pinCreateInput.setId("pinCreateInput");
        pinCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{hackerBean.hacker.pin}", String.class));
        LengthValidator pinCreateInputValidator = new LengthValidator();
        pinCreateInputValidator.setMinimum(4);
        pinCreateInputValidator.setMaximum(4);
        pinCreateInput.addValidator(pinCreateInputValidator);
        pinCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(pinCreateInput);
        
        Message pinCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pinCreateInputMessage.setId("pinCreateInputMessage");
        pinCreateInputMessage.setFor("pinCreateInput");
        pinCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pinCreateInputMessage);
        
        OutputLabel lastDrinkCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        lastDrinkCreateOutput.setFor("lastDrinkCreateInput");
        lastDrinkCreateOutput.setId("lastDrinkCreateOutput");
        lastDrinkCreateOutput.setValue("Last Drink:");
        htmlPanelGrid.getChildren().add(lastDrinkCreateOutput);
        
        Calendar lastDrinkCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        lastDrinkCreateInput.setId("lastDrinkCreateInput");
        lastDrinkCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{hackerBean.hacker.lastDrink}", Date.class));
        lastDrinkCreateInput.setNavigator(true);
        lastDrinkCreateInput.setEffect("slideDown");
        lastDrinkCreateInput.setPattern("dd/MM/yyyy");
        lastDrinkCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(lastDrinkCreateInput);
        
        Message lastDrinkCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        lastDrinkCreateInputMessage.setId("lastDrinkCreateInputMessage");
        lastDrinkCreateInputMessage.setFor("lastDrinkCreateInput");
        lastDrinkCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(lastDrinkCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid HackerBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameEditOutput.setFor("nameEditInput");
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputText nameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{hackerBean.hacker.name}", String.class));
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        OutputLabel amountEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        amountEditOutput.setFor("amountEditInput");
        amountEditOutput.setId("amountEditOutput");
        amountEditOutput.setValue("Amount:");
        htmlPanelGrid.getChildren().add(amountEditOutput);
        
        InputText amountEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        amountEditInput.setId("amountEditInput");
        amountEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{hackerBean.hacker.amount}", Float.class));
        amountEditInput.setRequired(true);
        DoubleRangeValidator amountEditInputValidator = new DoubleRangeValidator();
        amountEditInputValidator.setMinimum(-10.0);
        amountEditInput.addValidator(amountEditInputValidator);
        htmlPanelGrid.getChildren().add(amountEditInput);
        
        Message amountEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        amountEditInputMessage.setId("amountEditInputMessage");
        amountEditInputMessage.setFor("amountEditInput");
        amountEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(amountEditInputMessage);
        
        OutputLabel pinEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        pinEditOutput.setFor("pinEditInput");
        pinEditOutput.setId("pinEditOutput");
        pinEditOutput.setValue("Pin:");
        htmlPanelGrid.getChildren().add(pinEditOutput);
        
        InputText pinEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        pinEditInput.setId("pinEditInput");
        pinEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{hackerBean.hacker.pin}", String.class));
        LengthValidator pinEditInputValidator = new LengthValidator();
        pinEditInputValidator.setMinimum(4);
        pinEditInputValidator.setMaximum(4);
        pinEditInput.addValidator(pinEditInputValidator);
        pinEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(pinEditInput);
        
        Message pinEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pinEditInputMessage.setId("pinEditInputMessage");
        pinEditInputMessage.setFor("pinEditInput");
        pinEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pinEditInputMessage);
        
        OutputLabel lastDrinkEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        lastDrinkEditOutput.setFor("lastDrinkEditInput");
        lastDrinkEditOutput.setId("lastDrinkEditOutput");
        lastDrinkEditOutput.setValue("Last Drink:");
        htmlPanelGrid.getChildren().add(lastDrinkEditOutput);
        
        Calendar lastDrinkEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        lastDrinkEditInput.setId("lastDrinkEditInput");
        lastDrinkEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{hackerBean.hacker.lastDrink}", Date.class));
        lastDrinkEditInput.setNavigator(true);
        lastDrinkEditInput.setEffect("slideDown");
        lastDrinkEditInput.setPattern("dd/MM/yyyy");
        lastDrinkEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(lastDrinkEditInput);
        
        Message lastDrinkEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        lastDrinkEditInputMessage.setId("lastDrinkEditInputMessage");
        lastDrinkEditInputMessage.setFor("lastDrinkEditInput");
        lastDrinkEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(lastDrinkEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid HackerBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        HtmlOutputText nameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{hackerBean.hacker.name}", String.class));
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText amountLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        amountLabel.setId("amountLabel");
        amountLabel.setValue("Amount:");
        htmlPanelGrid.getChildren().add(amountLabel);
        
        HtmlOutputText amountValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        amountValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{hackerBean.hacker.amount}", String.class));
        htmlPanelGrid.getChildren().add(amountValue);
        
        HtmlOutputText pinLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pinLabel.setId("pinLabel");
        pinLabel.setValue("Pin:");
        htmlPanelGrid.getChildren().add(pinLabel);
        
        HtmlOutputText pinValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pinValue.setId("pinValue");
        pinValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{hackerBean.hacker.pin}", String.class));
        htmlPanelGrid.getChildren().add(pinValue);
        
        HtmlOutputText lastDrinkLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lastDrinkLabel.setId("lastDrinkLabel");
        lastDrinkLabel.setValue("Last Drink:");
        htmlPanelGrid.getChildren().add(lastDrinkLabel);
        
        HtmlOutputText lastDrinkValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lastDrinkValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{hackerBean.hacker.lastDrink}", Date.class));
        DateTimeConverter lastDrinkValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        lastDrinkValueConverter.setPattern("dd/MM/yyyy");
        lastDrinkValue.setConverter(lastDrinkValueConverter);
        htmlPanelGrid.getChildren().add(lastDrinkValue);
        
        return htmlPanelGrid;
    }
    
    public Hacker HackerBean.getHacker() {
        if (hacker == null) {
            hacker = new Hacker();
        }
        return hacker;
    }
    
    public void HackerBean.setHacker(Hacker hacker) {
        this.hacker = hacker;
    }
    
    public String HackerBean.onEdit() {
        return null;
    }
    
    public boolean HackerBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void HackerBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String HackerBean.displayList() {
        createDialogVisible = false;
        findAllHackers();
        return "hacker";
    }
    
    public String HackerBean.displayCreateDialog() {
        hacker = new Hacker();
        createDialogVisible = true;
        return "hacker";
    }
    
    public String HackerBean.persist() {
        String message = "";
        if (hacker.getId() != null) {
            hacker.merge();
            message = "message_successfully_updated";
        } else {
            hacker.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Hacker");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllHackers();
    }
    
    public String HackerBean.delete() {
        hacker.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Hacker");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllHackers();
    }
    
    public void HackerBean.reset() {
        hacker = null;
        createDialogVisible = false;
    }
    
    public void HackerBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
