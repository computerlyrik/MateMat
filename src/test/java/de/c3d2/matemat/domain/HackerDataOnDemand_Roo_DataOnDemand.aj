// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package de.c3d2.matemat.domain;

import de.c3d2.matemat.domain.Hacker;
import de.c3d2.matemat.domain.HackerDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect HackerDataOnDemand_Roo_DataOnDemand {
    
    declare @type: HackerDataOnDemand: @Component;
    
    private Random HackerDataOnDemand.rnd = new SecureRandom();
    
    private List<Hacker> HackerDataOnDemand.data;
    
    public Hacker HackerDataOnDemand.getNewTransientHacker(int index) {
        Hacker obj = new Hacker();
        setAmount(obj, index);
        setLastDrink(obj, index);
        setName(obj, index);
        setPin(obj, index);
        return obj;
    }
    
    public void HackerDataOnDemand.setAmount(Hacker obj, int index) {
        Float amount = new Integer(index).floatValue();
        if (amount > 9.9999999999E8F) {
            amount = 9.9999999999E8F;
        }
        obj.setAmount(amount);
    }
    
    public void HackerDataOnDemand.setLastDrink(Hacker obj, int index) {
        Date lastDrink = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setLastDrink(lastDrink);
    }
    
    public void HackerDataOnDemand.setName(Hacker obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void HackerDataOnDemand.setPin(Hacker obj, int index) {
        String pin = "pi_" + index;
        if (pin.length() > 4) {
            pin = pin.substring(0, 4);
        }
        obj.setPin(pin);
    }
    
    public Hacker HackerDataOnDemand.getSpecificHacker(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Hacker obj = data.get(index);
        Long id = obj.getId();
        return Hacker.findHacker(id);
    }
    
    public Hacker HackerDataOnDemand.getRandomHacker() {
        init();
        Hacker obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Hacker.findHacker(id);
    }
    
    public boolean HackerDataOnDemand.modifyHacker(Hacker obj) {
        return false;
    }
    
    public void HackerDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Hacker.findHackerEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Hacker' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Hacker>();
        for (int i = 0; i < 10; i++) {
            Hacker obj = getNewTransientHacker(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
